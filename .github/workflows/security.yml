name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 1 AM UTC
    - cron: '0 1 * * *'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/security.txt
    
    - name: Run Bandit security linting
      run: |
        bandit -r refunc/ -f json -o security-reports-bandit.json || true
        bandit -r refunc/ -f txt
      continue-on-error: true
    
    - name: Run Safety dependency scanning
      run: |
        safety check --json --output security-reports-safety.json || true
        safety check
      continue-on-error: true
    
    - name: Run pip-audit package scanning
      run: |
        pip-audit --format=json --output=security-reports-pip-audit.json || true
        pip-audit
      continue-on-error: true
    
    - name: Run comprehensive security scan
      run: |
        python scripts/security_scan.py --output security-report.json
      continue-on-error: true
      id: security-scan
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          security-*.json
          security-report.json
        retention-days: 30
    
    - name: Security scan summary
      run: |
        if [ -f security-report.json ]; then
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          python -c "
          import json
          with open('security-report.json', 'r') as f:
              report = json.load(f)
          summary = report['summary']
          print(f\"**Total Issues:** {summary['total_issues']}\")
          print(f\"**Critical Issues:** {summary['critical_issues']}\")
          print(f\"**Scan Status:** {summary['scan_status']}\")
          print()
          print('**Recommendations:**')
          for i, rec in enumerate(report['recommendations'], 1):
              print(f\"{i}. {rec}\")
          " >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Comment PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = 'security-report.json';
          
          if (fs.existsSync(path)) {
            const report = JSON.parse(fs.readFileSync(path, 'utf8'));
            const summary = report.summary;
            
            let comment = '## 🔒 Security Scan Results\n\n';
            comment += `**Total Issues:** ${summary.total_issues}\n`;
            comment += `**Critical Issues:** ${summary.critical_issues}\n`;
            comment += `**Scan Status:** ${summary.scan_status}\n\n`;
            
            if (report.recommendations && report.recommendations.length > 0) {
              comment += '**Recommendations:**\n';
              report.recommendations.forEach((rec, i) => {
                comment += `${i + 1}. ${rec}\n`;
              });
            }
            
            if (summary.critical_issues > 0) {
              comment += '\n⚠️ **Critical security issues detected!** Please review and fix before merging.\n';
            } else if (summary.total_issues === 0) {
              comment += '\n✅ **No security issues detected.**\n';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }
    
    - name: Fail on critical security issues
      if: steps.security-scan.outcome == 'failure'
      run: |
        echo "Critical security issues detected!"
        if [ -f security-report.json ]; then
          python -c "
          import json, sys
          with open('security-report.json', 'r') as f:
              report = json.load(f)
          if report['summary']['critical_issues'] > 0:
              print(f\"Found {report['summary']['critical_issues']} critical security issues\")
              sys.exit(1)
          "
        fi