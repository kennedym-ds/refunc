name: Documentation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  docs-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-docs-${{ hashFiles('**/requirements/*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-docs-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"
    
    - name: Check documentation completeness
      run: |
        # Check for missing docstrings
        python -c "
        import ast
        import os
        import sys
        
        def check_docstrings(file_path):
            with open(file_path, 'r') as f:
                try:
                    tree = ast.parse(f.read())
                except SyntaxError:
                    return []
            
            missing = []
            for node in ast.walk(tree):
                if isinstance(node, (ast.FunctionDef, ast.ClassDef)):
                    if not ast.get_docstring(node):
                        missing.append(f'{file_path}:{node.lineno} - {node.name}')
            return missing
        
        all_missing = []
        for root, dirs, files in os.walk('refunc'):
            dirs[:] = [d for d in dirs if not d.startswith('.')]
            for file in files:
                if file.endswith('.py') and not file.startswith('__'):
                    file_path = os.path.join(root, file)
                    missing = check_docstrings(file_path)
                    all_missing.extend(missing)
        
        if all_missing:
            print('⚠️  Missing docstrings found:')
            for item in all_missing[:10]:  # Show first 10
                print(f'  {item}')
            if len(all_missing) > 10:
                print(f'  ... and {len(all_missing) - 10} more')
            print(f'Total missing docstrings: {len(all_missing)}')
        else:
            print('✅ All functions and classes have docstrings')
        "
    
    - name: Build documentation with Sphinx
      run: |
        # Create minimal Sphinx configuration if it doesn't exist
        if [ ! -f "docs/conf.py" ]; then
          mkdir -p docs/_build
          echo "Documentation build skipped - no Sphinx configuration found"
          echo "This is expected for the current project state."
        else
          sphinx-build -b html docs docs/_build/html -W --keep-going
        fi
    
    - name: Check README and documentation files
      run: |
        # Validate markdown files
        python -c "
        import os
        import re
        
        def check_markdown_links(file_path):
            with open(file_path, 'r') as f:
                content = f.read()
            
            # Find markdown links
            links = re.findall(r'\[([^\]]+)\]\(([^)]+)\)', content)
            broken_links = []
            
            for text, link in links:
                if link.startswith('http'):
                    continue  # Skip external links
                if link.startswith('#'):
                    continue  # Skip anchor links
                
                # Check if local file exists
                if not os.path.exists(link):
                    broken_links.append(f'{text} -> {link}')
            
            return broken_links
        
        # Check main documentation files
        for doc_file in ['README.md', 'CHANGELOG.md']:
            if os.path.exists(doc_file):
                broken = check_markdown_links(doc_file)
                if broken:
                    print(f'⚠️  Broken links in {doc_file}:')
                    for link in broken:
                        print(f'  {link}')
                else:
                    print(f'✅ {doc_file} links are valid')
        "
    
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: documentation
        path: |
          docs/_build/
          README.md
          CHANGELOG.md

  docs-deploy:
    runs-on: ubuntu-latest
    needs: docs-check
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"
    
    - name: Build documentation
      run: |
        mkdir -p docs/_build/html
        echo "<!DOCTYPE html>
        <html>
        <head>
            <title>Refunc Documentation</title>
            <meta charset='utf-8'>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .header { color: #2e86c1; }
            </style>
        </head>
        <body>
            <h1 class='header'>Refunc - ML Utilities Toolkit</h1>
            <p>Documentation is being prepared. Please refer to the <a href='https://github.com/kennedym-ds/refunc/blob/main/README.md'>README</a> for now.</p>
            <h2>Quick Links</h2>
            <ul>
                <li><a href='https://github.com/kennedym-ds/refunc'>Repository</a></li>
                <li><a href='https://github.com/kennedym-ds/refunc/blob/main/README.md'>README</a></li>
                <li><a href='https://github.com/kennedym-ds/refunc/blob/main/CHANGELOG.md'>Changelog</a></li>
            </ul>
        </body>
        </html>" > docs/_build/html/index.html
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html